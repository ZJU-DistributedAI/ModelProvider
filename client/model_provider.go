// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "Model Provider Client": ModelProvider Resource Client
//
// Command:
// $ goagen
// --design=ModelProvider/design
// --out=$(GOPATH)\src\ModelProvider
// --version=v1.3.1

package client

import (
	"context"
	"fmt"
	"net/http"
	"net/url"
	"strconv"
)

// AskDataModelProviderPath computes a request path to the askData action of ModelProvider.
func AskDataModelProviderPath(dataHash string, eTHKey string, contractHash string) string {
	param0 := dataHash
	param1 := eTHKey
	param2 := contractHash

	return fmt.Sprintf("/model/askData/%s/%s/%s", param0, param1, param2)
}

// ask for data
func (c *Client) AskDataModelProvider(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewAskDataModelProviderRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewAskDataModelProviderRequest create the request corresponding to the askData action endpoint of the ModelProvider resource.
func (c *Client) NewAskDataModelProviderRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// CreateModelProviderPath computes a request path to the create action of ModelProvider.
func CreateModelProviderPath(eTHKey string, smartContract string) string {
	param0 := eTHKey
	param1 := smartContract

	return fmt.Sprintf("/model/create/%s/%s", param0, param1)
}

// create smart contract
func (c *Client) CreateModelProvider(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewCreateModelProviderRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewCreateModelProviderRequest create the request corresponding to the create action endpoint of the ModelProvider resource.
func (c *Client) NewCreateModelProviderRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// UploadModelProviderPath computes a request path to the upload action of ModelProvider.
func UploadModelProviderPath(modelHash string, eTHKey string, hEKey string, rSAKey string, contractHash string) string {
	param0 := modelHash
	param1 := eTHKey
	param2 := hEKey
	param3 := rSAKey
	param4 := contractHash

	return fmt.Sprintf("/model/upload/%s/%s/%s/%s/%s", param0, param1, param2, param3, param4)
}

// upload model
func (c *Client) UploadModelProvider(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewUploadModelProviderRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewUploadModelProviderRequest create the request corresponding to the upload action endpoint of the ModelProvider resource.
func (c *Client) NewUploadModelProviderRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// UploadFinalModelProviderPath computes a request path to the uploadFinal action of ModelProvider.
func UploadFinalModelProviderPath(hash string, rsaKey string, transID int, eTHKey string) string {
	param0 := hash
	param1 := rsaKey
	param2 := strconv.Itoa(transID)
	param3 := eTHKey

	return fmt.Sprintf("/model/uploadFinal/%s/%s/%s/%s", param0, param1, param2, param3)
}

// upload final argument and final distance for transaction ID
func (c *Client) UploadFinalModelProvider(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewUploadFinalModelProviderRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewUploadFinalModelProviderRequest create the request corresponding to the uploadFinal action endpoint of the ModelProvider resource.
func (c *Client) NewUploadFinalModelProviderRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}
