// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "Model Provider Client": CLI Commands
//
// Command:
// $ goagen
// --design=ModelProvider/design
// --out=$(GOPATH)\src\ModelProvider
// --version=v1.3.1

package cli

import (
	"ModelProvider/client"
	"context"
	"encoding/json"
	"fmt"
	"github.com/goadesign/goa"
	goaclient "github.com/goadesign/goa/client"
	uuid "github.com/goadesign/goa/uuid"
	"github.com/spf13/cobra"
	"log"
	"net/url"
	"os"
	"path"
	"strconv"
	"strings"
	"time"
)

type (
	// AskDataModelProviderCommand is the command line data structure for the askData action of ModelProvider
	AskDataModelProviderCommand struct {
		// ETH private key for transaction
		ETHKey string
		// smart contract hash
		ContractHash string
		// data hash
		DataHash    string
		PrettyPrint bool
	}

	// CreateModelProviderCommand is the command line data structure for the create action of ModelProvider
	CreateModelProviderCommand struct {
		// ETH private key for transaction
		ETHKey string
		// smart contract
		SmartContract string
		PrettyPrint   bool
	}

	// UploadModelProviderCommand is the command line data structure for the upload action of ModelProvider
	UploadModelProviderCommand struct {
		// ETH private key for transaction
		ETHKey string
		// Homomorphic Encryption Key
		HEKey string
		// RSA public key
		RSAKey string
		// smart contract hash
		ContractHash string
		// encrypted model IPFS address
		ModelHash   string
		PrettyPrint bool
	}

	// UploadFinalModelProviderCommand is the command line data structure for the uploadFinal action of ModelProvider
	UploadFinalModelProviderCommand struct {
		// ETH private key for transaction
		ETHKey string
		// final arguments hash
		Hash string
		// rsa private key for transaction id
		RsaKey string
		// transaction_id
		TransID     int
		PrettyPrint bool
	}

	// DownloadCommand is the command line data structure for the download command.
	DownloadCommand struct {
		// OutFile is the path to the download output file.
		OutFile string
	}
)

// RegisterCommands registers the resource action CLI commands.
func RegisterCommands(app *cobra.Command, c *client.Client) {
	var command, sub *cobra.Command
	command = &cobra.Command{
		Use:   "ask-data",
		Short: `ask for data`,
	}
	tmp1 := new(AskDataModelProviderCommand)
	sub = &cobra.Command{
		Use:   `model-provider ["/model/askData/DATA_HASH/ETH_KEY/CONTRACT_HASH"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp1.Run(c, args) },
	}
	tmp1.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp1.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "create",
		Short: `create smart contract`,
	}
	tmp2 := new(CreateModelProviderCommand)
	sub = &cobra.Command{
		Use:   `model-provider ["/model/create/ETH_KEY/SMART_CONTRACT"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp2.Run(c, args) },
	}
	tmp2.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp2.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "upload",
		Short: `upload model`,
	}
	tmp3 := new(UploadModelProviderCommand)
	sub = &cobra.Command{
		Use:   `model-provider ["/model/upload/MODEL_HASH/ETH_KEY/HE_KEY/RSA_KEY/CONTRACT_HASH"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp3.Run(c, args) },
	}
	tmp3.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp3.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "upload-final",
		Short: `upload final argument and final distance for transaction ID`,
	}
	tmp4 := new(UploadFinalModelProviderCommand)
	sub = &cobra.Command{
		Use:   `model-provider ["/model/uploadFinal/HASH/RSA_KEY/TRANS_ID/ETH_KEY"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp4.Run(c, args) },
	}
	tmp4.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp4.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)

	dl := new(DownloadCommand)
	dlc := &cobra.Command{
		Use:   "download [PATH]",
		Short: "Download file with given path",
		RunE: func(cmd *cobra.Command, args []string) error {
			return dl.Run(c, args)
		},
	}
	dlc.Flags().StringVar(&dl.OutFile, "out", "", "Output file")
	app.AddCommand(dlc)
}

func intFlagVal(name string, parsed int) *int {
	if hasFlag(name) {
		return &parsed
	}
	return nil
}

func float64FlagVal(name string, parsed float64) *float64 {
	if hasFlag(name) {
		return &parsed
	}
	return nil
}

func boolFlagVal(name string, parsed bool) *bool {
	if hasFlag(name) {
		return &parsed
	}
	return nil
}

func stringFlagVal(name string, parsed string) *string {
	if hasFlag(name) {
		return &parsed
	}
	return nil
}

func hasFlag(name string) bool {
	for _, arg := range os.Args[1:] {
		if strings.HasPrefix(arg, "--"+name) {
			return true
		}
	}
	return false
}

func jsonVal(val string) (*interface{}, error) {
	var t interface{}
	err := json.Unmarshal([]byte(val), &t)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func jsonArray(ins []string) ([]interface{}, error) {
	if ins == nil {
		return nil, nil
	}
	var vals []interface{}
	for _, id := range ins {
		val, err := jsonVal(id)
		if err != nil {
			return nil, err
		}
		vals = append(vals, val)
	}
	return vals, nil
}

func timeVal(val string) (*time.Time, error) {
	t, err := time.Parse(time.RFC3339, val)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func timeArray(ins []string) ([]time.Time, error) {
	if ins == nil {
		return nil, nil
	}
	var vals []time.Time
	for _, id := range ins {
		val, err := timeVal(id)
		if err != nil {
			return nil, err
		}
		vals = append(vals, *val)
	}
	return vals, nil
}

func uuidVal(val string) (*uuid.UUID, error) {
	t, err := uuid.FromString(val)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func uuidArray(ins []string) ([]uuid.UUID, error) {
	if ins == nil {
		return nil, nil
	}
	var vals []uuid.UUID
	for _, id := range ins {
		val, err := uuidVal(id)
		if err != nil {
			return nil, err
		}
		vals = append(vals, *val)
	}
	return vals, nil
}

func float64Val(val string) (*float64, error) {
	t, err := strconv.ParseFloat(val, 64)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func float64Array(ins []string) ([]float64, error) {
	if ins == nil {
		return nil, nil
	}
	var vals []float64
	for _, id := range ins {
		val, err := float64Val(id)
		if err != nil {
			return nil, err
		}
		vals = append(vals, *val)
	}
	return vals, nil
}

func boolVal(val string) (*bool, error) {
	t, err := strconv.ParseBool(val)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func boolArray(ins []string) ([]bool, error) {
	if ins == nil {
		return nil, nil
	}
	var vals []bool
	for _, id := range ins {
		val, err := boolVal(id)
		if err != nil {
			return nil, err
		}
		vals = append(vals, *val)
	}
	return vals, nil
}

// Run downloads files with given paths.
func (cmd *DownloadCommand) Run(c *client.Client, args []string) error {
	var (
		fnf func(context.Context, string) (int64, error)
		fnd func(context.Context, string, string) (int64, error)

		rpath   = args[0]
		outfile = cmd.OutFile
		logger  = goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
		ctx     = goa.WithLogger(context.Background(), logger)
		err     error
	)

	if rpath[0] != '/' {
		rpath = "/" + rpath
	}
	if rpath == "/swagger.json" {
		fnf = c.DownloadSwaggerJSON
		if outfile == "" {
			outfile = "swagger.json"
		}
		goto found
	}
	if strings.HasPrefix(rpath, "/swagger-ui/") {
		fnd = c.DownloadSwaggerUI
		rpath = rpath[12:]
		if outfile == "" {
			_, outfile = path.Split(rpath)
		}
		goto found
	}
	return fmt.Errorf("don't know how to download %s", rpath)
found:
	ctx = goa.WithLogContext(ctx, "file", outfile)
	if fnf != nil {
		_, err = fnf(ctx, outfile)
	} else {
		_, err = fnd(ctx, rpath, outfile)
	}
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	return nil
}

// Run makes the HTTP request corresponding to the AskDataModelProviderCommand command.
func (cmd *AskDataModelProviderCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/model/askData/%v/%v/%v", url.QueryEscape(cmd.DataHash), url.QueryEscape(cmd.ETHKey), url.QueryEscape(cmd.ContractHash))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.AskDataModelProvider(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *AskDataModelProviderCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var eTHKey string
	cc.Flags().StringVar(&cmd.ETHKey, "ETH_key", eTHKey, `ETH private key for transaction`)
	var contractHash string
	cc.Flags().StringVar(&cmd.ContractHash, "contract_hash", contractHash, `smart contract hash`)
	var dataHash string
	cc.Flags().StringVar(&cmd.DataHash, "data_hash", dataHash, `data hash`)
}

// Run makes the HTTP request corresponding to the CreateModelProviderCommand command.
func (cmd *CreateModelProviderCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/model/create/%v/%v", url.QueryEscape(cmd.ETHKey), url.QueryEscape(cmd.SmartContract))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.CreateModelProvider(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *CreateModelProviderCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var eTHKey string
	cc.Flags().StringVar(&cmd.ETHKey, "ETH_key", eTHKey, `ETH private key for transaction`)
	var smartContract string
	cc.Flags().StringVar(&cmd.SmartContract, "smart_contract", smartContract, `smart contract`)
}

// Run makes the HTTP request corresponding to the UploadModelProviderCommand command.
func (cmd *UploadModelProviderCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/model/upload/%v/%v/%v/%v/%v", url.QueryEscape(cmd.ModelHash), url.QueryEscape(cmd.ETHKey), url.QueryEscape(cmd.HEKey), url.QueryEscape(cmd.RSAKey), url.QueryEscape(cmd.ContractHash))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.UploadModelProvider(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *UploadModelProviderCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var eTHKey string
	cc.Flags().StringVar(&cmd.ETHKey, "ETH_key", eTHKey, `ETH private key for transaction`)
	var hEKey string
	cc.Flags().StringVar(&cmd.HEKey, "HE_key", hEKey, `Homomorphic Encryption Key`)
	var rSAKey string
	cc.Flags().StringVar(&cmd.RSAKey, "RSA_key", rSAKey, `RSA public key`)
	var contractHash string
	cc.Flags().StringVar(&cmd.ContractHash, "contract_hash", contractHash, `smart contract hash`)
	var modelHash string
	cc.Flags().StringVar(&cmd.ModelHash, "model_hash", modelHash, `encrypted model IPFS address`)
}

// Run makes the HTTP request corresponding to the UploadFinalModelProviderCommand command.
func (cmd *UploadFinalModelProviderCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/model/uploadFinal/%v/%v/%v/%v", url.QueryEscape(cmd.Hash), url.QueryEscape(cmd.RsaKey), cmd.TransID, url.QueryEscape(cmd.ETHKey))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.UploadFinalModelProvider(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *UploadFinalModelProviderCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var eTHKey string
	cc.Flags().StringVar(&cmd.ETHKey, "ETH_key", eTHKey, `ETH private key for transaction`)
	var hash string
	cc.Flags().StringVar(&cmd.Hash, "hash", hash, `final arguments hash`)
	var rsaKey string
	cc.Flags().StringVar(&cmd.RsaKey, "rsa_key", rsaKey, `rsa private key for transaction id`)
	var transID int
	cc.Flags().IntVar(&cmd.TransID, "trans_id", transID, `transaction_id`)
}
