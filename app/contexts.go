// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "Model Provider Client": Application Contexts
//
// Command:
// $ goagen
// --design=ModelProvider/design
// --out=$(GOPATH)\src\ModelProvider
// --version=v1.3.1

package app

import (
	"context"
	"github.com/goadesign/goa"
	"net/http"
	"strconv"
)

// AskDataModelProviderContext provides the ModelProvider askData action context.
type AskDataModelProviderContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ETHKey       string
	ContractHash string
	DataHash     string
}

// NewAskDataModelProviderContext parses the incoming request URL and body, performs validations and creates the
// context used by the ModelProvider controller askData action.
func NewAskDataModelProviderContext(ctx context.Context, r *http.Request, service *goa.Service) (*AskDataModelProviderContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := AskDataModelProviderContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramETHKey := req.Params["ETH_key"]
	if len(paramETHKey) > 0 {
		rawETHKey := paramETHKey[0]
		rctx.ETHKey = rawETHKey
	}
	paramContractHash := req.Params["contract_hash"]
	if len(paramContractHash) > 0 {
		rawContractHash := paramContractHash[0]
		rctx.ContractHash = rawContractHash
	}
	paramDataHash := req.Params["data_hash"]
	if len(paramDataHash) > 0 {
		rawDataHash := paramDataHash[0]
		rctx.DataHash = rawDataHash
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *AskDataModelProviderContext) OK(resp []byte) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "plain/text")
	}
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *AskDataModelProviderContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *AskDataModelProviderContext) InternalServerError(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// NotImplemented sends a HTTP response with status code 501.
func (ctx *AskDataModelProviderContext) NotImplemented(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 501, r)
}

// CreateModelProviderContext provides the ModelProvider create action context.
type CreateModelProviderContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ETHKey        string
	SmartContract string
}

// NewCreateModelProviderContext parses the incoming request URL and body, performs validations and creates the
// context used by the ModelProvider controller create action.
func NewCreateModelProviderContext(ctx context.Context, r *http.Request, service *goa.Service) (*CreateModelProviderContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CreateModelProviderContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramETHKey := req.Params["ETH_key"]
	if len(paramETHKey) > 0 {
		rawETHKey := paramETHKey[0]
		rctx.ETHKey = rawETHKey
	}
	paramSmartContract := req.Params["smart_contract"]
	if len(paramSmartContract) > 0 {
		rawSmartContract := paramSmartContract[0]
		rctx.SmartContract = rawSmartContract
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *CreateModelProviderContext) OK(resp []byte) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "plain/text")
	}
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *CreateModelProviderContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *CreateModelProviderContext) InternalServerError(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// NotImplemented sends a HTTP response with status code 501.
func (ctx *CreateModelProviderContext) NotImplemented(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 501, r)
}

// UploadModelProviderContext provides the ModelProvider upload action context.
type UploadModelProviderContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ETHKey       string
	HEKey        string
	RSAKey       string
	ContractHash string
	ModelHash    string
}

// NewUploadModelProviderContext parses the incoming request URL and body, performs validations and creates the
// context used by the ModelProvider controller upload action.
func NewUploadModelProviderContext(ctx context.Context, r *http.Request, service *goa.Service) (*UploadModelProviderContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := UploadModelProviderContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramETHKey := req.Params["ETH_key"]
	if len(paramETHKey) > 0 {
		rawETHKey := paramETHKey[0]
		rctx.ETHKey = rawETHKey
	}
	paramHEKey := req.Params["HE_key"]
	if len(paramHEKey) > 0 {
		rawHEKey := paramHEKey[0]
		rctx.HEKey = rawHEKey
	}
	paramRSAKey := req.Params["RSA_key"]
	if len(paramRSAKey) > 0 {
		rawRSAKey := paramRSAKey[0]
		rctx.RSAKey = rawRSAKey
	}
	paramContractHash := req.Params["contract_hash"]
	if len(paramContractHash) > 0 {
		rawContractHash := paramContractHash[0]
		rctx.ContractHash = rawContractHash
	}
	paramModelHash := req.Params["model_hash"]
	if len(paramModelHash) > 0 {
		rawModelHash := paramModelHash[0]
		rctx.ModelHash = rawModelHash
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *UploadModelProviderContext) OK(resp []byte) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "plain/text")
	}
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *UploadModelProviderContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *UploadModelProviderContext) InternalServerError(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// NotImplemented sends a HTTP response with status code 501.
func (ctx *UploadModelProviderContext) NotImplemented(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 501, r)
}

// UploadFinalModelProviderContext provides the ModelProvider uploadFinal action context.
type UploadFinalModelProviderContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ETHKey  string
	Hash    string
	RsaKey  string
	TransID int
}

// NewUploadFinalModelProviderContext parses the incoming request URL and body, performs validations and creates the
// context used by the ModelProvider controller uploadFinal action.
func NewUploadFinalModelProviderContext(ctx context.Context, r *http.Request, service *goa.Service) (*UploadFinalModelProviderContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := UploadFinalModelProviderContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramETHKey := req.Params["ETH_key"]
	if len(paramETHKey) > 0 {
		rawETHKey := paramETHKey[0]
		rctx.ETHKey = rawETHKey
	}
	paramHash := req.Params["hash"]
	if len(paramHash) > 0 {
		rawHash := paramHash[0]
		rctx.Hash = rawHash
	}
	paramRsaKey := req.Params["rsa_key"]
	if len(paramRsaKey) > 0 {
		rawRsaKey := paramRsaKey[0]
		rctx.RsaKey = rawRsaKey
	}
	paramTransID := req.Params["trans_id"]
	if len(paramTransID) > 0 {
		rawTransID := paramTransID[0]
		if transID, err2 := strconv.Atoi(rawTransID); err2 == nil {
			rctx.TransID = transID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("trans_id", rawTransID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *UploadFinalModelProviderContext) OK(resp []byte) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "plain/text")
	}
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *UploadFinalModelProviderContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *UploadFinalModelProviderContext) InternalServerError(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// NotImplemented sends a HTTP response with status code 501.
func (ctx *UploadFinalModelProviderContext) NotImplemented(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 501, r)
}
